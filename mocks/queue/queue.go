// Code generated by MockGen. DO NOT EDIT.
// Source: internal/model/queue/queue.go

// Package mock_queue is a generated GoMock package.
package mock_queue

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	customer "github.com/omkar.sunthankar/servicescheduler/internal/model/customer"
)

// MockQueueI is a mock of QueueI interface.
type MockQueueI struct {
	ctrl     *gomock.Controller
	recorder *MockQueueIMockRecorder
}

// MockQueueIMockRecorder is the mock recorder for MockQueueI.
type MockQueueIMockRecorder struct {
	mock *MockQueueI
}

// NewMockQueueI creates a new mock instance.
func NewMockQueueI(ctrl *gomock.Controller) *MockQueueI {
	mock := &MockQueueI{ctrl: ctrl}
	mock.recorder = &MockQueueIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueI) EXPECT() *MockQueueIMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockQueueI) Add(c *customer.Customer) (*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", c)
	ret0, _ := ret[0].(*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockQueueIMockRecorder) Add(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockQueueI)(nil).Add), c)
}

// Pop mocks base method.
func (m *MockQueueI) Pop() (*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pop")
	ret0, _ := ret[0].(*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pop indicates an expected call of Pop.
func (mr *MockQueueIMockRecorder) Pop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pop", reflect.TypeOf((*MockQueueI)(nil).Pop))
}
